datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String?            @unique
  emailVerified     DateTime?
  image             String             @default("/userPlaceholder.png")
  accounts          Account[]
  sessions          Session[]
  playlists         Playlist[]
  favoriteSongs     FavoriteSong[]
  favoritePlaylists FavoritePlaylist[]
  favoriteArtists   FavoriteArtist[]
  favoriteAlbums    FavoriteAlbum[]
}

model FavoriteSong {
  id     String @id @default(cuid())
  songId String
  song   Song   @relation(fields: [songId], references: [id])
  userId String
  User   User   @relation(fields: [userId], references: [id])
}

model FavoritePlaylist {
  id         String   @id @default(cuid())
  playlistId String
  userId     String
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  User       User     @relation(fields: [userId], references: [id])
}

model FavoriteArtist {
  id       String @id @default(cuid())
  artistId String
  artist   Artist @relation(fields: [artistId], references: [id])
  userId   String
  User     User   @relation(fields: [userId], references: [id])
}

model FavoriteAlbum {
  id      String @id @default(cuid())
  albumId String
  album   Album  @relation(fields: [albumId], references: [id])
  userId  String

  User User @relation(fields: [userId], references: [id])
}

model Artist {
  id             String           @id @default(cuid())
  name           String
  image          String
  albums         Album[]
  isVerified     Boolean          @default(false)
  favoriteArtist FavoriteArtist[]
}

model Album {
  id            String          @id @default(cuid())
  name          String
  image         String
  createdAt     DateTime
  songs         Song[]
  Artist        Artist          @relation(fields: [artistId], references: [id])
  artistId      String
  favoriteAlbum FavoriteAlbum[]
}

model Song {
  id           String         @id @default(cuid())
  name         String
  createdAt    DateTime
  duration     Int
  url          String
  Album        Album          @relation(fields: [albumId], references: [id])
  albumId      String
  playlists    Playlist[]
  favoriteSong FavoriteSong[]
}

model Playlist {
  id               String             @id @default(cuid())
  name             String
  image            String             @default("")
  desc             String             @default("")
  songs            Song[]
  User             User               @relation(fields: [userId], references: [id])
  userId           String
  favoritePlaylist FavoritePlaylist[]
}
